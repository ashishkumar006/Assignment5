name: Model Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        python -c "import torch; import torchvision; import tqdm; print('Dependencies successfully imported')"
        
    - name: Check parameter count
      run: |
        python -c "
        import torch
        from model import CompactMNIST
        from train import count_parameters
        
        model = CompactMNIST()
        param_count = count_parameters(model)
        
        print(f'\nModel Architecture:')
        print(model)
        print(f'\nParameter count by layer:')
        for name, param in model.named_parameters():
            if param.requires_grad:
                print(f'{name}: {param.numel():,} parameters')
        
        print(f'\nTotal trainable parameters: {param_count:,}')
        assert param_count < 25000, f'Model has {param_count:,} parameters, exceeding limit of 25,000'
        print(f'✓ Parameter count check passed: {param_count:,} parameters')
        "
        
    - name: Check training accuracy
      run: |
        python -c "
        import torch
        torch.manual_seed(42)  # For reproducibility
        from train import train_one_epoch
        
        print('Starting training...')
        print(f'Using device: {torch.device('cuda' if torch.cuda.is_available() else 'cpu')}')
        
        try:
            accuracy = train_one_epoch()
            assert accuracy > 95, f'Model accuracy {accuracy:.2f}% is below required 95%'
            print(f'✓ Accuracy check passed: {accuracy:.2f}%')
        except Exception as e:
            print(f'Error during training: {str(e)}')
            raise
        "